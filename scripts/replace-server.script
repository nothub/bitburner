disableLog("ALL");
clearLog();

biggestRam = 0;
smallestRam = getServerRam(getPurchasedServers()[0])[0];
smallestRamWorker = getPurchasedServers()[0];
logToggle = 0;
rescanworker = 0;

for (i = 0; i < getPurchasedServers().length; i++) {
    worker = getPurchasedServers()[i];
    ram = getServerRam(worker)[0];
    print('-> found worker: ' + worker + " (" + ram + "GB)");
    if (ram > biggestRam) {
        biggestRam = ram;
    }
    if (ram < smallestRam) {
        smallestRam = ram;
        smallestRamWorker = worker;
    }
}

print('-> biggest worker ram: ' + biggestRam);
print('-> smallest worker ram: ' + smallestRam);

money = getServerMoneyAvailable("home") * 0.99;

if (smallestRam == (biggestRam / 4) && money > biggestRam * 2 * 55000) {
    print('-> replacing smallest ram worker: ' + smallestRamWorker);
    killall(smallestRamWorker);
    sleep(10000);
    deleteServer(smallestRamWorker);
    run("buy-server.script");
    log = "replacing " + smallestRamWorker + " (" + smallestRam + "GB)";
    print('-> sending log on port: ' + 2);
    while(true) {
        if (peek(2) == 'NULL PORT DATA') {
            print('-> transmitting log: ' + log);
            writePort(2, log);
            break;
        } else if (peek(2) != 'NULL PORT DATA') {
            print('-> waiting for bandwith on port: ' + 2);
        }
    }
    while (isRunning("buy-server.script", getHostname())) {
        if (logToggle === 0) {
            print('-> sleep while buy-server.script is running');
            logToggle = 1;
        }
        sleep(1000);
    }
    logToggle = 0;
    sleep(1000);
    rescanworker = 1;
} else if (smallestRam == (biggestRam / 4) && money < biggestRam * 2 * 55000) {
    print('-> WARNING need more money to upgrade highest worker, less then ' + biggestRam * 2 * 55000 + '$');
    exit();
}

if (rescanworker == 1) {
    for (i = 0; i < getPurchasedServers().length; i++) {
        worker = getPurchasedServers()[i];
        ram = getServerRam(worker)[0];
        print('-> found worker: ' + worker + " (" + ram + "GB)");
        if (ram > biggestRam) {
            biggestRam = ram;
        }
        if (ram < smallestRam) {
            smallestRam = ram;
            smallestRamWorker = worker;
        }
    }
}

for (j = 0; j < getPurchasedServers().length; j++) {
    money = getServerMoneyAvailable("home") * 0.99;
    worker = getPurchasedServers()[j];
    ram = getServerRam(worker)[0];
    if (ram < biggestRam / 4) {
        if (money > (biggestRam * 55000)) {
            print("-> found replacement candidate: " + worker + " (" + ram + "GB)");
            print("-> replacing worker: " + worker + " (" + ram + ")");
            killall(worker);
            sleep(10000);
            deleteServer(worker);
            run("buy-server.script");
            log = "replacing " + worker + " (" + ram + "GB)";
            print('-> sending log on port: ' + 2);
            while(true) {
                if (peek(2) == 'NULL PORT DATA') {
                    print('-> transmitting log: ' + log);
                    writePort(2, log);
                    break;
                } else if (peek(2) != 'NULL PORT DATA') {
                    print('-> waiting for bandwith on port: ' + 2);
                }
            }
            while (isRunning("buy-server.script", getHostname())) {
                if (logToggle === 0) {
                    print('-> sleep while buy-server.script is running');
                    logToggle = 1;
                }
                sleep(1000);
            }
            logToggle = 0;
            sleep(1000);
        } else if (money > (biggestRam / 2 ) * 55000) {
            print("-> found replacement candidate: " + worker + " (" + ram + "GB)");
            print("-> replacing worker: " + worker + " (" + ram + ")");
            killall(worker);
            sleep(10000);
            deleteServer(worker);
            run("buy-server.script");
            log = "replacing " + worker + " (" + ram + "GB)";
            print('-> sending log on port: ' + 2);
            while(true) {
                if (peek(2) == 'NULL PORT DATA') {
                    print('-> transmitting log: ' + log);
                    writePort(2, log);
                    break;
                } else if (peek(2) != 'NULL PORT DATA') {
                    print('-> waiting for bandwith on port: ' + 2);
                }
            }
            while (isRunning("buy-server.script", getHostname())) {
                if (logToggle === 0) {
                    print('-> sleep while buy-server.script is running');
                    logToggle = 1;
                }
                sleep(1000);
            }
            logToggle = 0;
            sleep(1000);
        } else if (money > (biggestRam / 4 ) * 55000) {
            print("-> found replacement candidate: " + worker + " (" + ram + "GB)");
            print("-> replacing worker: " + worker + " (" + ram + ")");
            killall(worker);
            sleep(10000);
            deleteServer(worker);
            run("buy-server.script");
            log = "replacing " + worker + " (" + ram + "GB)";
            print('-> sending log on port: ' + 2);
            while(true) {
                if (peek(2) == 'NULL PORT DATA') {
                    print('-> transmitting log: ' + log);
                    writePort(2, log);
                    break;
                } else if (peek(2) != 'NULL PORT DATA') {
                    print('-> waiting for bandwith on port: ' + 2);
                }
            }
            while (isRunning("buy-server.script", getHostname())) {
                if (logToggle === 0) {
                    print('-> sleep while buy-server.script is running');
                    logToggle = 1;
                }
                sleep(1000);
            }
            logToggle = 0;
            sleep(1000);
        } else {
            print('-> WARNING cant replace worker, less then ' + ((biggestRam / 4) * 55000) + '$');
        }
    }
}
